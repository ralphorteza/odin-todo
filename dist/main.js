(()=>{"use strict";class e{constructor(e,t="No Date"){this.name=e,this.dueDate=t}setName(e){this.name=e}setDate(e){this.dueDate=e}getName(){return this.name}getDate(){return this.dueDate}}class t{static aProjectCard(e){const t=document.querySelector("#custom-projects-list"),o=document.createElement("div"),c=document.createElement("div"),r=document.createElement("div"),n=document.createElement("button"),s=document.createElement("button"),a=document.createElement("button");o.classList.add("card-project"),c.classList.add("left-panel"),r.classList.add("right-panel"),o.setAttribute("id",e),n.setAttribute("class","button-project"),s.setAttribute("class","button-edit-project"),a.setAttribute("class","button-delete-project"),n.textContent=e,s.textContent="edit",a.textContent="del",c.append(n),r.append(s),r.append(a),o.append(c),o.append(r),t.append(o)}static aTaskCard(e,t){const o=document.querySelector("#task-list"),c=document.createElement("div"),r=document.createElement("div"),n=document.createElement("div"),s=document.createElement("input"),a=document.createElement("p"),i=document.createElement("p"),d=document.createElement("button"),l=document.createElement("button");c.classList.add("task"),r.classList.add("left-panel"),n.classList.add("right-panel"),a.classList.add("task-name"),i.classList.add("date"),d.classList.add("button-edit-task"),l.classList.add("button-delete-task"),s.setAttribute("type","checkbox"),a.textContent=e,i.textContent=t,d.textContent="edit",l.textContent="delete",r.append(s),r.append(a),n.append(i),n.append(d),n.append(l),c.append(r),c.append(n),o.append(c)}}class o{constructor(e){this.name=e,this.tasks=[]}setName(e){this.name=e}getName(){return this.name}setTasks(e){this.tasks=e}getTasks(){return this.tasks}getTask(e){return this.tasks.find((t=>t.getName()===e))}contains(e){return this.tasks.some((t=>t.getName()===e))}addTask(e){this.tasks.find((t=>t.getName()===e.name))||this.tasks.push(e)}deleteTask(e){this.tasks=this.tasks.filter((t=>t.name!==e))}}class c{constructor(){this.projects=[],this.projects.push(new o("Inbox"))}setProjects(e){this.projects=e}getProjects(){return this.projects}getProject(e){return this.projects.find((t=>t.getName()===e))}contains(e){return this.projects.some((t=>t.getName()===e))}addProject(e){this.projects.find((t=>t.name===e.name))||this.projects.push(e)}deleteProject(e){const t=this.projects.find((t=>t.getName()===e));this.projects.splice(this.projects.indexOf(t),1)}}class r{static saveProjectsList(e){localStorage.setItem("projectsList",JSON.stringify(e))}static getProjectsList(){const t=Object.assign(new c,JSON.parse(localStorage.getItem("projectsList")));return t.setProjects(t.getProjects().map((e=>Object.assign(new o,e)))),t.getProjects().forEach((t=>t.setTasks(t.getTasks().map((t=>Object.assign(new e,t)))))),t}static addProject(e){const t=r.getProjectsList();t.addProject(e),r.saveProjectsList(t)}static deleteProject(e){const t=r.getProjectsList();t.deleteProject(e),r.saveProjectsList(t)}static renameProject(e,t){const o=r.getProjectsList();o.getProject(e).setName(t),r.saveProjectsList(o)}static addTask(e,t){const o=r.getProjectsList();o.getProject(e).addTask(t),r.saveProjectsList(o)}static deleteTask(e,t){const o=r.getProjectsList();o.getProject(e).deleteTask(t),r.saveProjectsList(o)}static renameTask(e,t,o){const c=r.getProjectsList();c.getProject(e).getTask(t).setName(o),r.saveProjectsList(c)}static setTaskDate(e,t,o){r.getProjectsList().getProject(e).getTask(t).setDate(o)}}class n{static loadTasks(){document.querySelector("#task-list").innerHTML="";const e=document.querySelector("#project-name-header").textContent;r.getProjectsList().getProject(e).getTasks().forEach((e=>t.aTaskCard(e.name,e.dueDate))),n.initTaskButtons()}static initTaskButtons(){const e=document.querySelectorAll(".button-edit-task"),t=document.querySelectorAll(".button-delete-task");e.forEach((e=>{e.addEventListener("click",n.editTaskHandler)})),t.forEach((e=>{e.addEventListener("click",n.deleteTask)}))}static deleteTask(e){const t=document.querySelector("#project-name-header").textContent,o=e.target.parentElement.parentElement,c=o.children[0].children[1].textContent;r.deleteTask(t,c),o.remove(),console.log(`delete task ${c} in project ${t}!`)}static editTaskHandler(e){const t=document.querySelector("#project-name-header").textContent,o=e.target.parentElement.parentElement,c=o.children[0].children[1].textContent,r=o.children[1].children[0].textContent,s=document.querySelector("#current-task-name"),a=document.querySelector("#edit-task-title"),i=document.querySelector("#edit-task-date"),d=document.querySelector("#overlay"),l=document.querySelector("#form-edit-task-container");s.textContent=c,s.style.display="none",a.placeholder=c,i.value=r,d.classList.add("active"),l.classList.add("active"),console.log(`Editing task ${c} in project ${t}!`),n.initEditTaskButtons()}static initEditTaskButtons(){const e=document.querySelector("#create-edit-task");document.querySelector("#cancel-edit-task").addEventListener("click",n.cancelTaskEdit),e.addEventListener("click",n.submitTaskEdit)}static cancelTaskEdit(){const e=document.querySelector("#overlay"),t=document.querySelector("#form-edit-task-container"),o=document.querySelector("#current-task-name").textContent,c=document.querySelector("#project-name-header").textContent;e.classList.remove("active"),t.classList.remove("active"),console.log(`Cancelled editing task ${o} in project ${c}!`)}static submitTaskEdit(e){e.preventDefault();const t=document.querySelector("#overlay"),o=document.querySelector("#form-edit-task-container"),c=document.querySelector("#current-task-name").textContent,n=document.querySelector("#project-name-header").textContent,s=document.querySelector("#edit-task-title").value,a=document.querySelector("#edit-task-date").value,i=r.getProjectsList().getProject(n).getTask(c).getDate();console.log(`Current task name: ${c}`),console.log(`Current due date of task: ${i}`),""!==s?r.getProjectsList().getProject(n).contains(s)&&i===a?console.log("No changes have been made!"):(t.classList.remove("active"),o.classList.remove("active"),console.log(`Submit editing task ${c} in project ${n}!`)):console.log("New task name cannot be empty!")}}class s{static formEvents(){s.forAddTaskButton(),s.forTaskFormButtons()}static forAddTaskButton(){document.querySelector("#add-task").addEventListener("click",s.openTaskForm)}static openTaskForm(){const e=document.querySelector("#overlay"),t=document.querySelector("#form-container");e.classList.add("active"),t.classList.add("active")}static forTaskFormButtons(){const e=document.querySelector("#cancel-task"),t=document.querySelector("#form");e.addEventListener("click",s.cancelTaskForm),t.addEventListener("submit",s.createTask)}static cancelTaskForm(){const e=document.querySelector("#overlay"),t=document.querySelector("#form-container");e.classList.remove("active"),t.classList.remove("active")}static createTask(o){o.preventDefault();const c=document.querySelector("#overlay"),s=document.querySelector("#form-container"),a=document.querySelector("#project-name-header").textContent,i=document.querySelector("#task-title").value,d=document.querySelector("#task-date").value;""!==i?r.getProjectsList().getProject(a).contains(i)?console.log(`task name ${i} already exist in this project!`):(r.addTask(a,new e(i,d)),t.aTaskCard(i,d),n.initTaskButtons(),c.classList.remove("active"),s.classList.remove("active"),document.querySelector("#form").reset(),console.log(`Task created in project ${a}!`)):console.log("task name cannot be empty!")}}class a{static createProject(){a.addProjectButtons()}static addProjectButtons(){const e=document.querySelector("#button-add-project"),t=document.querySelector("#button-cancel-project");e.addEventListener("click",a.addProject),t.addEventListener("click",a.cancelProject)}static addProject(){const e=document.querySelector("#input-add-project").value;""!==e?r.getProjectsList().contains(e)?console.log(`${e} already exist!`):(document.querySelector("#input-add-project").value="",r.addProject(new o(e)),t.aProjectCard(e),a.initProjectButtons(),console.log(`Project ${e} is created!`)):console.log("Project name cannot be empty!")}static cancelProject(){document.querySelector("#input-add-project").value="",console.log("project cancelled")}static initProjectButtons(){const e=document.querySelectorAll(".button-project"),t=document.querySelectorAll(".button-delete-project"),o=document.querySelectorAll(".button-edit-project");e.forEach((e=>{e.addEventListener("click",a.selectedProjectInSidebar)})),o.forEach((e=>{e.addEventListener("click",a.openForm)})),t.forEach((e=>{e.addEventListener("click",a.deleteProject)}))}static selectedProjectInSidebar(e){const t=e.target.textContent;console.log(`project button ${t} clicked!`),a.openProject(t,this)}static openProject(e,t){const o=document.querySelector("#project-name-header"),c=document.querySelectorAll(".button-default-project"),r=document.querySelectorAll(".button-project");o.textContent=e,[...c,...r].forEach((e=>e.classList.remove("active"))),t.classList.add("active"),n.loadTasks()}static deleteProject(e){const t=e.target.parentElement.parentElement,o=t.children[0].children[0].textContent;console.log(`${o} deleted!`),r.deleteProject(o),t.remove(),a.openProject("Inbox",document.querySelector("#button-inbox-projects"))}static openInboxProject(){document.querySelector("#button-inbox-projects").addEventListener("click",a.selectedProjectInSidebar)}static openForm(e){e.preventDefault(),document.querySelector("#form-project").reset();const t=document.querySelector("#overlay"),o=document.querySelector("#form-project-container"),c=document.querySelector("#current-project-title"),r=e.target.parentElement.parentElement.children[0].children[0].textContent;c.textContent=r,c.style.display="none",document.querySelector("#project-title").placeholder=r,t.classList.add("active"),o.classList.add("active"),console.log(`Opened edit form for project ${r}!`),a.initFormProjectButtons()}static initFormProjectButtons(){const e=document.querySelector("#button-cancel-project-edit");document.querySelector("#button-rename-project").addEventListener("click",a.submitForm),e.addEventListener("click",a.cancelForm)}static submitForm(e){e.preventDefault();const t=document.querySelector("#overlay"),o=document.querySelector("#form-project-container"),c=document.querySelector("#current-project-title").textContent,n=document.querySelector("#project-title").value,s=document.querySelectorAll(".card-project");return""===n?(document.querySelector("#project-title").value="",void console.log("New project name cannot be empty!")):r.getProjectsList().contains(n)?(document.querySelector("#project-title").value="",void console.log("The new project name cannot be identical to an existing project!")):(s.forEach((e=>{if(e.getAttribute("id")!==c)return;const t=e.children[0].children[0];e.setAttribute("id",n),t.textContent=n})),r.renameProject(c,n),t.classList.remove("active"),void o.classList.remove("active"))}static cancelForm(){const e=document.querySelector("#current-project-title").textContent,t=document.querySelector("#overlay"),o=document.querySelector("#form-project-container");t.classList.remove("active"),o.classList.remove("active"),console.log(`Project ${e} form cancelled!`)}}class i{static project(){a.createProject()}static initProjectButtons(){a.initProjectButtons()}static openProject(e,t){a.openProject(e,t)}static projectForm(){a.forProjectFormButtons()}static openInboxProject(){a.openInboxProject()}static form(){s.formEvents()}}class d{static loadPage(){i.form(),i.project(),i.openProject("Inbox",document.querySelector("#button-inbox-projects")),d.loadProjects(),i.openInboxProject()}static loadProjects(){r.getProjectsList().getProjects().forEach((e=>{"Inbox"!==e.name&&d.loadProject(e.name)}))}static loadProject(e){t.aProjectCard(e),i.initProjectButtons(),console.log(`Project ${e} is loaded!`)}}document.addEventListener("DOMContentLoaded",d.loadPage)})();