(()=>{"use strict";class e{constructor(e,t,o="No Date"){this.name=e,this.id=t,this.dueDate=o}setName(e){this.name=e}setDate(e){this.dueDate=e}getName(){return this.name}getID(){return this.id}getDate(){return this.dueDate}}class t{static aProjectCard(e){const t=document.querySelector("#custom-projects-list"),o=document.createElement("div"),c=document.createElement("div"),n=document.createElement("div"),r=document.createElement("button"),s=document.createElement("button"),a=document.createElement("button");o.classList.add("card-project"),c.classList.add("left-panel"),n.classList.add("right-panel"),o.setAttribute("id",e),r.setAttribute("class","button-project"),s.setAttribute("class","button-edit-project"),a.setAttribute("class","button-delete-project"),r.textContent=e,s.textContent="edit",a.textContent="del",c.append(r),n.append(s),n.append(a),o.append(c),o.append(n),t.append(o)}static aTaskCard(e,t,o){const c=document.querySelector("#task-list"),n=document.createElement("div"),r=document.createElement("p"),s=document.createElement("div"),a=document.createElement("div"),i=document.createElement("input"),d=document.createElement("p"),l=document.createElement("p"),u=document.createElement("button"),m=document.createElement("button");n.classList.add("task"),s.classList.add("left-panel"),a.classList.add("right-panel"),d.classList.add("task-name"),l.classList.add("date"),u.classList.add("button-edit-task"),m.classList.add("button-delete-task"),i.setAttribute("type","checkbox"),r.textContent=t,r.style.display="none",d.textContent=e,l.textContent=o,u.textContent="edit",m.textContent="delete",s.append(i),s.append(d),a.append(l),a.append(u),a.append(m),n.append(s),n.append(a),n.append(r),c.append(n)}static changeTaskName(e,t){const o=e.children[0].children[1];o.textContent="",o.textContent=t}static changeDueDate(e,t){const o=e.children[1].children[0];o.textContent="",o.textContent=t}}class o{constructor(e){this.name=e,this.tasks=[]}setName(e){this.name=e}getName(){return this.name}setTasks(e){this.tasks=e}getTasks(){return this.tasks}getTask(e){return this.tasks.find((t=>t.getID()===e))}contains(e){return this.tasks.some((t=>t.getName()===e))}addTask(e){this.tasks.find((t=>t.getName()===e.name))||this.tasks.push(e)}deleteTask(e){this.tasks=this.tasks.filter((t=>t.id!==e))}}class c{constructor(){this.projects=[],this.projects.push(new o("Inbox"))}setProjects(e){this.projects=e}getProjects(){return this.projects}getProject(e){return this.projects.find((t=>t.getName()===e))}contains(e){return this.projects.some((t=>t.getName()===e))}addProject(e){this.projects.find((t=>t.name===e.name))||this.projects.push(e)}deleteProject(e){const t=this.projects.find((t=>t.getName()===e));this.projects.splice(this.projects.indexOf(t),1)}}class n{static saveProjectsList(e){localStorage.setItem("projectsList",JSON.stringify(e))}static getProjectsList(){const t=Object.assign(new c,JSON.parse(localStorage.getItem("projectsList")));return t.setProjects(t.getProjects().map((e=>Object.assign(new o,e)))),t.getProjects().forEach((t=>t.setTasks(t.getTasks().map((t=>Object.assign(new e,t)))))),t}static addProject(e){const t=n.getProjectsList();t.addProject(e),n.saveProjectsList(t)}static deleteProject(e){const t=n.getProjectsList();t.deleteProject(e),n.saveProjectsList(t)}static renameProject(e,t){const o=n.getProjectsList();o.getProject(e).setName(t),n.saveProjectsList(o)}static addTask(e,t){const o=n.getProjectsList();o.getProject(e).addTask(t),n.saveProjectsList(o)}static deleteTask(e,t){const o=n.getProjectsList();o.getProject(e).deleteTask(t),n.saveProjectsList(o)}static editTask(e,t,o,c,r){const s=n.getProjectsList();s.getProject(e).getTask(t).setDate(r),s.getProject(e).getTask(t).setName(c),n.saveProjectsList(s)}static renameTask(e,t,o){const c=n.getProjectsList();c.getProject(e).getTask(t).setName(o),n.saveProjectsList(c)}static setTaskDate(e,t,o){n.getProjectsList().getProject(e).getTask(t).setDate(o)}}class r{static loadTasks(){document.querySelector("#task-list").innerHTML="";const e=document.querySelector("#project-name-header").textContent;n.getProjectsList().getProject(e).getTasks().forEach((e=>t.aTaskCard(e.name,e.id,e.dueDate))),r.initTaskButtons()}static initTaskButtons(){const e=document.querySelectorAll(".button-edit-task"),t=document.querySelectorAll(".button-delete-task");e.forEach((e=>{e.addEventListener("click",r.editTaskHandler)})),t.forEach((e=>{e.addEventListener("click",r.deleteTask)}))}static deleteTask(e){const t=document.querySelector("#project-name-header").textContent,o=e.target.parentElement.parentElement,c=o.children[0].children[1].textContent,r=o.children[2].textContent;n.deleteTask(t,r),o.remove(),console.log(`delete task ${c} in project ${t}!`)}static editTaskHandler(e){const t=document.querySelector("#form-edit-task"),o=document.querySelector("#project-name-header").textContent,c=e.target.parentElement.parentElement,n=c.children[0].children[1].textContent,s=c.children[1].children[0].textContent,a=c.children[2].textContent,i=document.querySelector("#current-task-name"),d=document.querySelector("#unique-id"),l=document.querySelector("#edit-task-title"),u=document.querySelector("#edit-task-date"),m=document.querySelector("#overlay"),j=document.querySelector("#form-edit-task-container");t.reset(),i.textContent=n,i.style.display="none",d.textContent=a,d.style.display="none",l.placeholder=n,u.value=s,m.classList.add("active"),j.classList.add("active"),console.log(`Editing task ${n} (id #${a}) in project ${o}!`),r.initEditTaskButtons()}static initEditTaskButtons(){const e=document.querySelector("#create-edit-task");document.querySelector("#cancel-edit-task").addEventListener("click",r.cancelTaskEdit),e.addEventListener("click",r.submitTaskEdit)}static cancelTaskEdit(){const e=document.querySelector("#overlay"),t=document.querySelector("#form-edit-task-container"),o=document.querySelector("#current-task-name").textContent,c=document.querySelector("#project-name-header").textContent;e.classList.remove("active"),t.classList.remove("active"),console.log(`Cancelled editing task ${o} in project ${c}!`)}static submitTaskEdit(e){e.preventDefault();const o=document.querySelector("#overlay"),c=document.querySelector("#form-edit-task"),r=document.querySelector("#form-edit-task-container"),s=document.querySelector("#current-task-name").textContent,a=document.querySelector("#unique-id").textContent,i=document.querySelector("#project-name-header").textContent,d=document.querySelector("#edit-task-date").value,l=n.getProjectsList().getProject(i).getTask(a).getDate();let u=document.querySelector("#edit-task-title").value;console.log(`Current task name: ${s} (id #${a})`),console.log(`Current due date of task: ${l}`),""===u&&(u=s),u!==s||l!==d?(document.querySelectorAll(".task").forEach((e=>{e.children[2].textContent===a&&(t.changeTaskName(e,u),t.changeDueDate(e,d))})),n.editTask(i,a,s,u,d),o.classList.remove("active"),r.classList.remove("active"),c.reset(),console.log(`Submit edited task ${s} in project ${i}!`),console.log(`Task name changed from ${s} to ${u}!`)):console.log("No changes have been made!")}}class s{static generate(){const e=Math.random().toString(36).replace("0.","");return console.log(e),e}}class a{static formEvents(){a.forAddTaskButton(),a.forTaskFormButtons()}static forAddTaskButton(){document.querySelector("#add-task").addEventListener("click",a.openTaskForm)}static openTaskForm(){const e=document.querySelector("#overlay"),t=document.querySelector("#form-container");e.classList.add("active"),t.classList.add("active")}static forTaskFormButtons(){const e=document.querySelector("#cancel-task"),t=document.querySelector("#form");e.addEventListener("click",a.cancelTaskForm),t.addEventListener("submit",a.createTask)}static cancelTaskForm(){const e=document.querySelector("#overlay"),t=document.querySelector("#form-container");e.classList.remove("active"),t.classList.remove("active")}static createTask(o){o.preventDefault();const c=document.querySelector("#overlay"),a=document.querySelector("#form-container"),i=document.querySelector("#project-name-header").textContent,d=document.querySelector("#task-title").value,l=document.querySelector("#task-date").value,u=s.generate();""!==d?n.getProjectsList().getProject(i).contains(d)?console.log(`task name ${d} already exist in this project!`):(n.addTask(i,new e(d,u,l)),t.aTaskCard(d,u,l),r.initTaskButtons(),c.classList.remove("active"),a.classList.remove("active"),document.querySelector("#form").reset(),console.log(`Task created in project ${i}!`)):console.log("task name cannot be empty!")}}class i{static createProject(){i.addProjectButtons()}static addProjectButtons(){const e=document.querySelector("#button-add-project"),t=document.querySelector("#button-cancel-project");e.addEventListener("click",i.addProject),t.addEventListener("click",i.cancelProject)}static addProject(){const e=document.querySelector("#input-add-project").value;""!==e?n.getProjectsList().contains(e)?console.log(`${e} already exist!`):(document.querySelector("#input-add-project").value="",n.addProject(new o(e)),t.aProjectCard(e),i.initProjectButtons(),console.log(`Project ${e} is created!`)):console.log("Project name cannot be empty!")}static cancelProject(){document.querySelector("#input-add-project").value="",console.log("project cancelled")}static initProjectButtons(){const e=document.querySelectorAll(".button-project"),t=document.querySelectorAll(".button-delete-project"),o=document.querySelectorAll(".button-edit-project");e.forEach((e=>{e.addEventListener("click",i.selectedProjectInSidebar)})),o.forEach((e=>{e.addEventListener("click",i.openForm)})),t.forEach((e=>{e.addEventListener("click",i.deleteProject)}))}static selectedProjectInSidebar(e){const t=e.target.textContent;console.log(`project button ${t} clicked!`),i.openProject(t,this)}static openProject(e,t){const o=document.querySelector("#project-name-header"),c=document.querySelectorAll(".button-default-project"),n=document.querySelectorAll(".button-project");o.textContent=e,[...c,...n].forEach((e=>e.classList.remove("active"))),t.classList.add("active"),r.loadTasks()}static deleteProject(e){const t=e.target.parentElement.parentElement,o=t.children[0].children[0].textContent;console.log(`${o} deleted!`),n.deleteProject(o),t.remove(),i.openProject("Inbox",document.querySelector("#button-inbox-projects"))}static openInboxProject(){document.querySelector("#button-inbox-projects").addEventListener("click",i.selectedProjectInSidebar)}static openForm(e){e.preventDefault(),document.querySelector("#form-project").reset();const t=document.querySelector("#overlay"),o=document.querySelector("#form-project-container"),c=document.querySelector("#current-project-title"),n=e.target.parentElement.parentElement.children[0].children[0].textContent;c.textContent=n,c.style.display="none",document.querySelector("#project-title").placeholder=n,t.classList.add("active"),o.classList.add("active"),console.log(`Opened edit form for project ${n}!`),i.initFormProjectButtons()}static initFormProjectButtons(){const e=document.querySelector("#button-cancel-project-edit");document.querySelector("#button-rename-project").addEventListener("click",i.submitForm),e.addEventListener("click",i.cancelForm)}static submitForm(e){e.preventDefault();const t=document.querySelector("#overlay"),o=document.querySelector("#form-project-container"),c=document.querySelector("#current-project-title").textContent,r=document.querySelector("#project-title").value,s=document.querySelectorAll(".card-project");return""===r?(document.querySelector("#project-title").value="",void console.log("New project name cannot be empty!")):n.getProjectsList().contains(r)?(document.querySelector("#project-title").value="",void console.log("The new project name cannot be identical to an existing project!")):(s.forEach((e=>{if(e.getAttribute("id")!==c)return;const t=e.children[0].children[0];e.setAttribute("id",r),t.textContent=r})),n.renameProject(c,r),t.classList.remove("active"),void o.classList.remove("active"))}static cancelForm(){const e=document.querySelector("#current-project-title").textContent,t=document.querySelector("#overlay"),o=document.querySelector("#form-project-container");t.classList.remove("active"),o.classList.remove("active"),console.log(`Project ${e} form cancelled!`)}}class d{static project(){i.createProject()}static initProjectButtons(){i.initProjectButtons()}static openProject(e,t){i.openProject(e,t)}static projectForm(){i.forProjectFormButtons()}static openInboxProject(){i.openInboxProject()}static form(){a.formEvents()}}class l{static loadPage(){d.form(),d.project(),d.openProject("Inbox",document.querySelector("#button-inbox-projects")),l.loadProjects(),d.openInboxProject()}static loadProjects(){n.getProjectsList().getProjects().forEach((e=>{"Inbox"!==e.name&&l.loadProject(e.name)}))}static loadProject(e){t.aProjectCard(e),d.initProjectButtons(),console.log(`Project ${e} is loaded!`)}}document.addEventListener("DOMContentLoaded",l.loadPage)})();