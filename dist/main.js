(()=>{"use strict";class t{constructor(t,e,o,c,r,s="No Date"){this.name=t,this.id=e,this.status=o,this.priority=c,this.description=r,this.dueDate=s}setName(t){this.name=t}setDate(t){this.dueDate=t}setStatus(t){this.status=t}setPriority(t){this.priority=t}setDescription(t){this.description=t}getName(){return this.name}getID(){return this.id}getDescription(){return this.description}getDate(){return this.dueDate}}class e{static aProjectCard(t){const e=document.querySelector("#custom-projects-list"),o=document.createElement("div"),c=document.createElement("div"),r=document.createElement("div"),s=document.createElement("button"),n=document.createElement("button"),a=document.createElement("button");o.classList.add("card-project"),c.classList.add("left-panel"),r.classList.add("right-panel"),o.setAttribute("id",t),s.setAttribute("class","button-project"),n.setAttribute("class","button-edit-project"),a.setAttribute("class","button-delete-project"),s.textContent=t,n.textContent="edit",a.textContent="del",c.append(s),r.append(n),r.append(a),o.append(c),o.append(r),e.append(o)}static aTaskCard(t,e,o,c,r){const s=document.querySelector("#task-list"),n=document.createElement("div"),a=document.createElement("p"),i=document.createElement("div"),d=document.createElement("div"),l=document.createElement("input"),u=document.createElement("p"),m=document.createElement("p"),p=document.createElement("p"),j=document.createElement("button"),k=document.createElement("button");n.classList.add("task"),i.classList.add("left-panel"),d.classList.add("right-panel"),l.classList.add("task-status"),u.classList.add("task-name"),m.classList.add("task-priority"),p.classList.add("date"),j.classList.add("button-edit-task"),k.classList.add("button-delete-task"),l.setAttribute("type","checkbox"),!0===o&&l.setAttribute("checked","true"),a.textContent=e,a.style.display="none",u.textContent=t,m.textContent=c,p.textContent=r,j.textContent="edit",k.textContent="delete",i.append(l),i.append(u),i.append(m),d.append(p),d.append(j),d.append(k),n.append(i),n.append(d),n.append(a),s.append(n)}static changeTaskName(t,e){const o=t.children[0].children[1];o.textContent="",o.textContent=e}static changeDueDate(t,e){const o=t.children[1].children[0];o.textContent="",o.textContent=e}static changeTaskPriority(t,e){const o=t.children[0].children[2];o.textContent="",o.textContent=e}}class o{constructor(t){this.name=t,this.tasks=[]}setName(t){this.name=t}getName(){return this.name}setTasks(t){this.tasks=t}getTasks(){return this.tasks}getTask(t){return this.tasks.find((e=>e.getID()===t))}contains(t){return this.tasks.some((e=>e.getName()===t))}addTask(t){this.tasks.find((e=>e.getName()===t.name))||this.tasks.push(t)}deleteTask(t){this.tasks=this.tasks.filter((e=>e.id!==t))}}class c{constructor(){this.projects=[],this.projects.push(new o("Inbox"))}setProjects(t){this.projects=t}getProjects(){return this.projects}getProject(t){return this.projects.find((e=>e.getName()===t))}contains(t){return this.projects.some((e=>e.getName()===t))}addProject(t){this.projects.find((e=>e.name===t.name))||this.projects.push(t)}deleteProject(t){const e=this.projects.find((e=>e.getName()===t));this.projects.splice(this.projects.indexOf(e),1)}}class r{static saveProjectsList(t){localStorage.setItem("projectsList",JSON.stringify(t))}static getProjectsList(){const e=Object.assign(new c,JSON.parse(localStorage.getItem("projectsList")));return e.setProjects(e.getProjects().map((t=>Object.assign(new o,t)))),e.getProjects().forEach((e=>e.setTasks(e.getTasks().map((e=>Object.assign(new t,e)))))),e}static addProject(t){const e=r.getProjectsList();e.addProject(t),r.saveProjectsList(e)}static deleteProject(t){const e=r.getProjectsList();e.deleteProject(t),r.saveProjectsList(e)}static renameProject(t,e){const o=r.getProjectsList();o.getProject(t).setName(e),r.saveProjectsList(o)}static addTask(t,e){const o=r.getProjectsList();o.getProject(t).addTask(e),r.saveProjectsList(o)}static deleteTask(t,e){const o=r.getProjectsList();o.getProject(t).deleteTask(e),r.saveProjectsList(o)}static updateTaskStatus(t,e,o){const c=r.getProjectsList();c.getProject(t).getTask(e).setStatus(o),r.saveProjectsList(c)}static editTask(t,e,o,c,s,n,a){const i=r.getProjectsList();i.getProject(t).getTask(e).setDate(a),i.getProject(t).getTask(e).setPriority(s),i.getProject(t).getTask(e).setDescription(n),i.getProject(t).getTask(e).setName(c),r.saveProjectsList(i)}static renameTask(t,e,o){const c=r.getProjectsList();c.getProject(t).getTask(e).setName(o),r.saveProjectsList(c)}static setTaskDate(t,e,o){r.getProjectsList().getProject(t).getTask(e).setDate(o)}}class s{static loadTasks(){document.querySelector("#task-list").innerHTML="";const t=document.querySelector("#project-name-header").textContent;r.getProjectsList().getProject(t).getTasks().forEach((t=>e.aTaskCard(t.name,t.id,t.status,t.priority,t.dueDate))),s.initTaskButtons()}static initTaskButtons(){const t=document.querySelectorAll(".task-status"),e=document.querySelectorAll(".button-edit-task"),o=document.querySelectorAll(".button-delete-task");t.forEach((t=>{t.addEventListener("click",s.updateTaskStatus)})),e.forEach((t=>{t.addEventListener("click",s.editTaskHandler)})),o.forEach((t=>{t.addEventListener("click",s.deleteTask)}))}static updateTaskStatus(t){const e=document.querySelector("#project-name-header").textContent,o=t.target.parentElement.parentElement.children[2].textContent,c=t.target.checked;r.updateTaskStatus(e,o,c)}static deleteTask(t){const e=document.querySelector("#project-name-header").textContent,o=t.target.parentElement.parentElement,c=o.children[0].children[1].textContent,s=o.children[2].textContent;r.deleteTask(e,s),o.remove(),console.log(`delete task ${c} in project ${e}!`)}static editTaskHandler(t){const e=document.querySelector("#form-edit-task"),o=document.querySelector("#project-name-header").textContent,c=t.target.parentElement.parentElement,n=c.children[0].children[1].textContent,a=c.children[0].children[2].textContent,i=c.children[1].children[0].textContent,d=c.children[2].textContent,l=document.querySelector("#current-task-name"),u=document.querySelector("#unique-id"),m=document.querySelector("#edit-task-title"),p=document.querySelector("#edit-task-date"),j=document.querySelector("#overlay"),k=document.querySelector("#form-edit-task-container"),g=document.querySelector("#edit-task-priority"),y=document.querySelector("#edit-task-description"),P=r.getProjectsList().getProject(o).getTask(d).getDescription();e.reset(),l.textContent=n,l.style.display="none",u.textContent=d,u.style.display="none",m.placeholder=n,p.value=i,g.value=a,y.value=P,j.classList.add("active"),k.classList.add("active"),console.log(`Editing task ${n} (id #${d}) in project ${o}!`),s.initEditTaskButtons()}static initEditTaskButtons(){const t=document.querySelector("#create-edit-task");document.querySelector("#cancel-edit-task").addEventListener("click",s.cancelTaskEdit),t.addEventListener("click",s.submitTaskEdit)}static cancelTaskEdit(){const t=document.querySelector("#overlay"),e=document.querySelector("#form-edit-task-container"),o=document.querySelector("#current-task-name").textContent,c=document.querySelector("#project-name-header").textContent;t.classList.remove("active"),e.classList.remove("active"),console.log(`Cancelled editing task ${o} in project ${c}!`)}static submitTaskEdit(t){t.preventDefault();const o=document.querySelectorAll(".task"),c=document.querySelector("#overlay"),s=document.querySelector("#form-edit-task"),n=document.querySelector("#form-edit-task-container"),a=document.querySelector("#current-task-name").textContent,i=document.querySelector("#unique-id").textContent,d=document.querySelector("#project-name-header").textContent,l=document.querySelector("#edit-task-date").value,u=document.querySelector("#edit-task-priority").value,m=document.querySelector("#edit-task-description").value,p=r.getProjectsList().getProject(d).getTask(i).getDate();let j=document.querySelector("#edit-task-title").value.trim();""===j&&(j=a),r.getProjectsList().getProject(d).contains(j)&&j!==a?console.log("This task name already exist!"):(console.log(`Current task name: ${a} (id #${i})`),console.log(`Current due date of task: ${p}`),o.forEach((t=>{t.children[2].textContent===i&&(e.changeTaskName(t,j),e.changeTaskPriority(t,u),e.changeDueDate(t,l))})),r.editTask(d,i,a,j,u,m,l),c.classList.remove("active"),n.classList.remove("active"),s.reset(),console.log(`Submit edited task ${a} in project ${d}!`),console.log(`Task name changed from ${a} to ${j}!`))}}class n{static generate(){const t=Math.random().toString(36).replace("0.","");return console.log(t),t}}class a{static formEvents(){a.forAddTaskButton(),a.forTaskFormButtons()}static forAddTaskButton(){document.querySelector("#add-task").addEventListener("click",a.openTaskForm)}static openTaskForm(){const t=document.querySelector("#overlay"),e=document.querySelector("#form-container");t.classList.add("active"),e.classList.add("active")}static forTaskFormButtons(){const t=document.querySelector("#cancel-task"),e=document.querySelector("#form");t.addEventListener("click",a.cancelTaskForm),e.addEventListener("submit",a.createTask)}static cancelTaskForm(){const t=document.querySelector("#overlay"),e=document.querySelector("#form-container");t.classList.remove("active"),e.classList.remove("active")}static createTask(o){o.preventDefault();const c=document.querySelector("#overlay"),a=document.querySelector("#form-container"),i=document.querySelector("#project-name-header").textContent,d=document.querySelector("#task-title").value.trim(),l=document.querySelector("#task-date").value,u=document.querySelector("#task-priority").value,m=document.querySelector("#task-description").value,p=n.generate();""!==d?r.getProjectsList().getProject(i).contains(d)?console.log(`task name ${d} already exist in this project!`):(console.log(`priority is ${u}`),r.addTask(i,new t(d,p,!1,u,m,l)),e.aTaskCard(d,p,!1,u,l),s.initTaskButtons(),c.classList.remove("active"),a.classList.remove("active"),document.querySelector("#form").reset(),console.log(`Task created in project ${i}!`)):console.log("task name cannot be empty!")}}class i{static createProject(){i.addProjectButtons()}static addProjectButtons(){const t=document.querySelector("#button-add-project"),e=document.querySelector("#button-cancel-project");t.addEventListener("click",i.addProject),e.addEventListener("click",i.cancelProject)}static addProject(){const t=document.querySelector("#input-add-project").value;""!==t?r.getProjectsList().contains(t)?console.log(`${t} already exist!`):(document.querySelector("#input-add-project").value="",r.addProject(new o(t)),e.aProjectCard(t),i.initProjectButtons(),console.log(`Project ${t} is created!`)):console.log("Project name cannot be empty!")}static cancelProject(){document.querySelector("#input-add-project").value="",console.log("project cancelled")}static initProjectButtons(){const t=document.querySelectorAll(".button-project"),e=document.querySelectorAll(".button-delete-project"),o=document.querySelectorAll(".button-edit-project");t.forEach((t=>{t.addEventListener("click",i.selectedProjectInSidebar)})),o.forEach((t=>{t.addEventListener("click",i.openForm)})),e.forEach((t=>{t.addEventListener("click",i.deleteProject)}))}static selectedProjectInSidebar(t){const e=t.target.textContent;console.log(`project button ${e} clicked!`),i.openProject(e,this)}static openProject(t,e){const o=document.querySelector("#project-name-header"),c=document.querySelectorAll(".button-default-project"),r=document.querySelectorAll(".button-project");o.textContent=t,[...c,...r].forEach((t=>t.classList.remove("active"))),e.classList.add("active"),s.loadTasks()}static deleteProject(t){const e=t.target.parentElement.parentElement,o=e.children[0].children[0].textContent;console.log(`${o} deleted!`),r.deleteProject(o),e.remove(),i.openProject("Inbox",document.querySelector("#button-inbox-projects"))}static openInboxProject(){document.querySelector("#button-inbox-projects").addEventListener("click",i.selectedProjectInSidebar)}static openForm(t){t.preventDefault(),document.querySelector("#form-project").reset();const e=document.querySelector("#overlay"),o=document.querySelector("#form-project-container"),c=document.querySelector("#current-project-title"),r=t.target.parentElement.parentElement.children[0].children[0].textContent;c.textContent=r,c.style.display="none",document.querySelector("#project-title").placeholder=r,e.classList.add("active"),o.classList.add("active"),console.log(`Opened edit form for project ${r}!`),i.initFormProjectButtons()}static initFormProjectButtons(){const t=document.querySelector("#button-cancel-project-edit");document.querySelector("#button-rename-project").addEventListener("click",i.submitForm),t.addEventListener("click",i.cancelForm)}static submitForm(t){t.preventDefault();const e=document.querySelector("#overlay"),o=document.querySelector("#form-project-container"),c=document.querySelector("#current-project-title").textContent,s=document.querySelector("#project-title").value,n=document.querySelectorAll(".card-project");return""===s?(document.querySelector("#project-title").value="",void console.log("New project name cannot be empty!")):r.getProjectsList().contains(s)?(document.querySelector("#project-title").value="",void console.log("The new project name cannot be identical to an existing project!")):(n.forEach((t=>{if(t.getAttribute("id")!==c)return;const e=t.children[0].children[0];t.setAttribute("id",s),e.textContent=s})),r.renameProject(c,s),e.classList.remove("active"),void o.classList.remove("active"))}static cancelForm(){const t=document.querySelector("#current-project-title").textContent,e=document.querySelector("#overlay"),o=document.querySelector("#form-project-container");e.classList.remove("active"),o.classList.remove("active"),console.log(`Project ${t} form cancelled!`)}}class d{static project(){i.createProject()}static initProjectButtons(){i.initProjectButtons()}static openProject(t,e){i.openProject(t,e)}static projectForm(){i.forProjectFormButtons()}static openInboxProject(){i.openInboxProject()}static form(){a.formEvents()}}class l{static loadPage(){d.form(),d.project(),d.openProject("Inbox",document.querySelector("#button-inbox-projects")),l.loadProjects(),d.openInboxProject()}static loadProjects(){r.getProjectsList().getProjects().forEach((t=>{"Inbox"!==t.name&&l.loadProject(t.name)}))}static loadProject(t){e.aProjectCard(t),d.initProjectButtons(),console.log(`Project ${t} is loaded!`)}}document.addEventListener("DOMContentLoaded",l.loadPage)})();