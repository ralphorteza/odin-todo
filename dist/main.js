(()=>{"use strict";class t{constructor(t,e="No Date"){this.name=t,this.dueDate=e}setName(t){this.name=t}setDate(t){this.dueDate=t}getName(){return this.name}getDate(){return this.dueDate}}class e{static aProjectCard(t){const e=document.querySelector("#custom-projects-list"),s=document.createElement("button");s.setAttribute("class","button-project"),s.textContent=t,e.append(s)}static aTaskCard(t,e){const s=document.querySelector("#project-preview"),a=document.createElement("div"),c=document.createElement("div"),o=document.createElement("div"),r=document.createElement("input"),n=document.createElement("p"),i=document.createElement("p"),d=document.createElement("button"),l=document.createElement("button");a.classList.add("task"),c.classList.add("left-panel"),o.classList.add("right-panel"),n.classList.add("task-name"),i.classList.add("date"),d.classList.add("button-edit-task"),l.classList.add("button-delete-task"),r.setAttribute("type","checkbox"),n.textContent=t,i.textContent=e,d.textContent="edit",l.textContent="delete",c.append(r),c.append(n),o.append(i),o.append(d),o.append(l),a.append(c),a.append(o),s.append(a)}}class s{static formEvents(){s.forAddTaskButton(),s.forTaskFormButtons()}static forAddTaskButton(){document.querySelector("#add-task").addEventListener("click",s.openTaskForm)}static openTaskForm(){const t=document.querySelector("#overlay"),e=document.querySelector("#form-container");t.classList.add("active"),e.classList.add("active")}static forTaskFormButtons(){const t=document.querySelector("#cancel-task"),e=document.querySelector("#form");t.addEventListener("click",s.cancelTaskForm),e.addEventListener("submit",s.createTask)}static cancelTaskForm(){const t=document.querySelector("#overlay"),e=document.querySelector("#form-container");t.classList.remove("active"),e.classList.remove("active")}static createTask(s){s.preventDefault();const a=document.querySelector("#task-title").value,c=document.querySelector("#task-date").value,o=new t(a,c);e.aTaskCard(o.getName(),o.getDate()),document.querySelector("#form-container").classList.remove("active"),document.querySelector("#overlay").classList.remove("active")}}class a{constructor(t){this.name=t,this.tasks=[]}setName(t){this.name=t}getName(){return this.name}setTasks(t){this.tasks=t}getTasks(){return this.tasks}getTask(t){return this.tasks.find((e=>e.getName()===t))}contains(t){return this.tasks.some((e=>e.getName()===t))}addTask(t){this.tasks.find((e=>e.getName()===t.name))||this.tasks.push(t)}deleteTask(t){this.tasks=this.tasks.filter((e=>e.name!==t))}}class c{constructor(){this.projects=[],this.projects.push(new a("Inbox","ADRE"))}setProjects(t){this.projects=t}getProjects(){return this.projects}getProject(t){return this.projects.find((e=>e.getName()===t))}contains(t){return this.projects.some((e=>e.getName()===t))}addProject(t){this.projects.find((e=>e.name===t.name))||this.projects.push(t)}deleteProject(t){const e=this.projects.find((e=>e.getName()===t));this.projects.splice(this.projects.indexOf(e),1)}}class o{static saveProjectsList(t){localStorage.setItem("projectsList",JSON.stringify(t))}static getProjectsList(){const e=Object.assign(new c,JSON.parse(localStorage.getItem("projectsList")));return e.setProjects(e.getProjects().map((t=>Object.assign(new a,t)))),e.getProjects().forEach((e=>e.setTasks(e.getTasks().map((e=>Object.assign(new t,e)))))),e}static addProject(t){const e=o.getProjectsList();e.addProject(t),o.saveProjectsList(e)}static deleteProject(t){const e=o.getProjectsList();e.deleteProject(t),o.saveProjectsList(e)}static addTask(t,e){const s=o.getProjectsList();s.getProject(t).addTask(e),o.saveProjectsList(s)}static deleteTask(t,e){const s=o.getProjectsList();s.getProject(t).deleteTask(e),o.saveProjectsList(s)}static renameTask(t,e,s){const a=o.getProjectsList();a.getProject(t).getTask(e).setName(s),o.saveProjectsList(a)}static setTaskDate(t,e,s){o.getProjectsList().getProject(t).getTask(e).setDate(s)}}class r{static projectEvents(){r.addProjectButtons()}static addProjectButtons(){const t=document.querySelector("#button-add-project"),e=document.querySelector("#button-cancel-project");t.addEventListener("click",r.addProject),e.addEventListener("click",r.cancelProject)}static addProject(){const t=document.querySelector("#input-add-project").value;""!==t?o.getProjectsList().contains(t)?console.log(`${t} already exist!`):(o.addProject(new a(t)),e.aProjectCard(t),r.initProjectButtons()):console.log("Project name cannot be empty!")}static cancelProject(){document.querySelector("#input-add-project").value=""}static selectedProjectInSidebar(t){}static initProjectButtons(){document.querySelectorAll(".button-project").forEach((t=>{t.addEventListener("click",r.selectedProjectInSidebar)}))}}class n{static forTaskButtons(){const t=document.querySelectorAll(".button-edit-task"),e=document.querySelectorAll(".button-delete-task");t.forEach((t=>{t.addEventListener("click",n.editTask)})),e.forEach((t=>{t.addEventListener("click",n.deleteTask)}))}static editTask(t){t.target.parentElement.parentElement.children[0].children[1].textContent}static deleteTask(t){t.target.parentElement.parentElement.remove()}static project(){r.projectEvents()}static form(){s.formEvents()}}document.addEventListener("DOMContentLoaded",class{static loadPage(){n.form(),n.forTaskButtons(),n.project()}}.loadPage)})();