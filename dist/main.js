(()=>{"use strict";class t{constructor(t,e,c,o="No Date"){this.name=t,this.id=e,this.status=c,this.dueDate=o}setName(t){this.name=t}setDate(t){this.dueDate=t}setStatus(t){this.status=t}getName(){return this.name}getID(){return this.id}getDate(){return this.dueDate}}class e{static aProjectCard(t){const e=document.querySelector("#custom-projects-list"),c=document.createElement("div"),o=document.createElement("div"),s=document.createElement("div"),n=document.createElement("button"),r=document.createElement("button"),a=document.createElement("button");c.classList.add("card-project"),o.classList.add("left-panel"),s.classList.add("right-panel"),c.setAttribute("id",t),n.setAttribute("class","button-project"),r.setAttribute("class","button-edit-project"),a.setAttribute("class","button-delete-project"),n.textContent=t,r.textContent="edit",a.textContent="del",o.append(n),s.append(r),s.append(a),c.append(o),c.append(s),e.append(c)}static aTaskCard(t,e,c,o){const s=document.querySelector("#task-list"),n=document.createElement("div"),r=document.createElement("p"),a=document.createElement("div"),i=document.createElement("div"),d=document.createElement("input"),l=document.createElement("p"),u=document.createElement("p"),m=document.createElement("button"),j=document.createElement("button");n.classList.add("task"),a.classList.add("left-panel"),i.classList.add("right-panel"),l.classList.add("task-name"),u.classList.add("date"),d.classList.add("task-status"),m.classList.add("button-edit-task"),j.classList.add("button-delete-task"),d.setAttribute("type","checkbox"),!0===c&&d.setAttribute("checked","true"),r.textContent=e,r.style.display="none",l.textContent=t,u.textContent=o,m.textContent="edit",j.textContent="delete",a.append(d),a.append(l),i.append(u),i.append(m),i.append(j),n.append(a),n.append(i),n.append(r),s.append(n)}static changeTaskName(t,e){const c=t.children[0].children[1];c.textContent="",c.textContent=e}static changeDueDate(t,e){const c=t.children[1].children[0];c.textContent="",c.textContent=e}}class c{constructor(t){this.name=t,this.tasks=[]}setName(t){this.name=t}getName(){return this.name}setTasks(t){this.tasks=t}getTasks(){return this.tasks}getTask(t){return this.tasks.find((e=>e.getID()===t))}contains(t){return this.tasks.some((e=>e.getName()===t))}addTask(t){this.tasks.find((e=>e.getName()===t.name))||this.tasks.push(t)}deleteTask(t){this.tasks=this.tasks.filter((e=>e.id!==t))}}class o{constructor(){this.projects=[],this.projects.push(new c("Inbox"))}setProjects(t){this.projects=t}getProjects(){return this.projects}getProject(t){return this.projects.find((e=>e.getName()===t))}contains(t){return this.projects.some((e=>e.getName()===t))}addProject(t){this.projects.find((e=>e.name===t.name))||this.projects.push(t)}deleteProject(t){const e=this.projects.find((e=>e.getName()===t));this.projects.splice(this.projects.indexOf(e),1)}}class s{static saveProjectsList(t){localStorage.setItem("projectsList",JSON.stringify(t))}static getProjectsList(){const e=Object.assign(new o,JSON.parse(localStorage.getItem("projectsList")));return e.setProjects(e.getProjects().map((t=>Object.assign(new c,t)))),e.getProjects().forEach((e=>e.setTasks(e.getTasks().map((e=>Object.assign(new t,e)))))),e}static addProject(t){const e=s.getProjectsList();e.addProject(t),s.saveProjectsList(e)}static deleteProject(t){const e=s.getProjectsList();e.deleteProject(t),s.saveProjectsList(e)}static renameProject(t,e){const c=s.getProjectsList();c.getProject(t).setName(e),s.saveProjectsList(c)}static addTask(t,e){const c=s.getProjectsList();c.getProject(t).addTask(e),s.saveProjectsList(c)}static deleteTask(t,e){const c=s.getProjectsList();c.getProject(t).deleteTask(e),s.saveProjectsList(c)}static updateTaskStatus(t,e,c){const o=s.getProjectsList();o.getProject(t).getTask(e).setStatus(c),s.saveProjectsList(o)}static editTask(t,e,c,o,n){const r=s.getProjectsList();r.getProject(t).getTask(e).setDate(n),r.getProject(t).getTask(e).setName(o),s.saveProjectsList(r)}static renameTask(t,e,c){const o=s.getProjectsList();o.getProject(t).getTask(e).setName(c),s.saveProjectsList(o)}static setTaskDate(t,e,c){s.getProjectsList().getProject(t).getTask(e).setDate(c)}}class n{static loadTasks(){document.querySelector("#task-list").innerHTML="";const t=document.querySelector("#project-name-header").textContent;s.getProjectsList().getProject(t).getTasks().forEach((t=>e.aTaskCard(t.name,t.id,t.status,t.dueDate))),n.initTaskButtons()}static initTaskButtons(){const t=document.querySelectorAll(".task-status"),e=document.querySelectorAll(".button-edit-task"),c=document.querySelectorAll(".button-delete-task");t.forEach((t=>{t.addEventListener("click",n.updateTaskStatus)})),e.forEach((t=>{t.addEventListener("click",n.editTaskHandler)})),c.forEach((t=>{t.addEventListener("click",n.deleteTask)}))}static updateTaskStatus(t){const e=document.querySelector("#project-name-header").textContent,c=t.target.parentElement.parentElement,o=(c.children[0].children[1].textContent,c.children[2].textContent),n=t.target.checked;s.updateTaskStatus(e,o,n)}static deleteTask(t){const e=document.querySelector("#project-name-header").textContent,c=t.target.parentElement.parentElement,o=c.children[0].children[1].textContent,n=c.children[2].textContent;s.deleteTask(e,n),c.remove(),console.log(`delete task ${o} in project ${e}!`)}static editTaskHandler(t){const e=document.querySelector("#form-edit-task"),c=document.querySelector("#project-name-header").textContent,o=t.target.parentElement.parentElement,s=o.children[0].children[1].textContent,r=o.children[1].children[0].textContent,a=o.children[2].textContent,i=document.querySelector("#current-task-name"),d=document.querySelector("#unique-id"),l=document.querySelector("#edit-task-title"),u=document.querySelector("#edit-task-date"),m=document.querySelector("#overlay"),j=document.querySelector("#form-edit-task-container");e.reset(),i.textContent=s,i.style.display="none",d.textContent=a,d.style.display="none",l.placeholder=s,u.value=r,m.classList.add("active"),j.classList.add("active"),console.log(`Editing task ${s} (id #${a}) in project ${c}!`),n.initEditTaskButtons()}static initEditTaskButtons(){const t=document.querySelector("#create-edit-task");document.querySelector("#cancel-edit-task").addEventListener("click",n.cancelTaskEdit),t.addEventListener("click",n.submitTaskEdit)}static cancelTaskEdit(){const t=document.querySelector("#overlay"),e=document.querySelector("#form-edit-task-container"),c=document.querySelector("#current-task-name").textContent,o=document.querySelector("#project-name-header").textContent;t.classList.remove("active"),e.classList.remove("active"),console.log(`Cancelled editing task ${c} in project ${o}!`)}static submitTaskEdit(t){t.preventDefault();const c=document.querySelectorAll(".task"),o=document.querySelector("#overlay"),n=document.querySelector("#form-edit-task"),r=document.querySelector("#form-edit-task-container"),a=document.querySelector("#current-task-name").textContent,i=document.querySelector("#unique-id").textContent,d=document.querySelector("#project-name-header").textContent,l=document.querySelector("#edit-task-date").value,u=s.getProjectsList().getProject(d).getTask(i).getDate();let m=document.querySelector("#edit-task-title").value.trim();""===m&&(m=a),s.getProjectsList().getProject(d).contains(m)&&m!==a?console.log("This task name already exist!"):(console.log(`Current task name: ${a} (id #${i})`),console.log(`Current due date of task: ${u}`),c.forEach((t=>{t.children[2].textContent===i&&(e.changeTaskName(t,m),e.changeDueDate(t,l))})),s.editTask(d,i,a,m,l),o.classList.remove("active"),r.classList.remove("active"),n.reset(),console.log(`Submit edited task ${a} in project ${d}!`),console.log(`Task name changed from ${a} to ${m}!`))}}class r{static generate(){const t=Math.random().toString(36).replace("0.","");return console.log(t),t}}class a{static formEvents(){a.forAddTaskButton(),a.forTaskFormButtons()}static forAddTaskButton(){document.querySelector("#add-task").addEventListener("click",a.openTaskForm)}static openTaskForm(){const t=document.querySelector("#overlay"),e=document.querySelector("#form-container");t.classList.add("active"),e.classList.add("active")}static forTaskFormButtons(){const t=document.querySelector("#cancel-task"),e=document.querySelector("#form");t.addEventListener("click",a.cancelTaskForm),e.addEventListener("submit",a.createTask)}static cancelTaskForm(){const t=document.querySelector("#overlay"),e=document.querySelector("#form-container");t.classList.remove("active"),e.classList.remove("active")}static createTask(c){c.preventDefault();const o=document.querySelector("#overlay"),a=document.querySelector("#form-container"),i=document.querySelector("#project-name-header").textContent,d=document.querySelector("#task-title").value.trim(),l=document.querySelector("#task-date").value,u=r.generate();""!==d?s.getProjectsList().getProject(i).contains(d)?console.log(`task name ${d} already exist in this project!`):(s.addTask(i,new t(d,u,!1,l)),e.aTaskCard(d,u,!1,l),n.initTaskButtons(),o.classList.remove("active"),a.classList.remove("active"),document.querySelector("#form").reset(),console.log(`Task created in project ${i}!`)):console.log("task name cannot be empty!")}}class i{static createProject(){i.addProjectButtons()}static addProjectButtons(){const t=document.querySelector("#button-add-project"),e=document.querySelector("#button-cancel-project");t.addEventListener("click",i.addProject),e.addEventListener("click",i.cancelProject)}static addProject(){const t=document.querySelector("#input-add-project").value;""!==t?s.getProjectsList().contains(t)?console.log(`${t} already exist!`):(document.querySelector("#input-add-project").value="",s.addProject(new c(t)),e.aProjectCard(t),i.initProjectButtons(),console.log(`Project ${t} is created!`)):console.log("Project name cannot be empty!")}static cancelProject(){document.querySelector("#input-add-project").value="",console.log("project cancelled")}static initProjectButtons(){const t=document.querySelectorAll(".button-project"),e=document.querySelectorAll(".button-delete-project"),c=document.querySelectorAll(".button-edit-project");t.forEach((t=>{t.addEventListener("click",i.selectedProjectInSidebar)})),c.forEach((t=>{t.addEventListener("click",i.openForm)})),e.forEach((t=>{t.addEventListener("click",i.deleteProject)}))}static selectedProjectInSidebar(t){const e=t.target.textContent;console.log(`project button ${e} clicked!`),i.openProject(e,this)}static openProject(t,e){const c=document.querySelector("#project-name-header"),o=document.querySelectorAll(".button-default-project"),s=document.querySelectorAll(".button-project");c.textContent=t,[...o,...s].forEach((t=>t.classList.remove("active"))),e.classList.add("active"),n.loadTasks()}static deleteProject(t){const e=t.target.parentElement.parentElement,c=e.children[0].children[0].textContent;console.log(`${c} deleted!`),s.deleteProject(c),e.remove(),i.openProject("Inbox",document.querySelector("#button-inbox-projects"))}static openInboxProject(){document.querySelector("#button-inbox-projects").addEventListener("click",i.selectedProjectInSidebar)}static openForm(t){t.preventDefault(),document.querySelector("#form-project").reset();const e=document.querySelector("#overlay"),c=document.querySelector("#form-project-container"),o=document.querySelector("#current-project-title"),s=t.target.parentElement.parentElement.children[0].children[0].textContent;o.textContent=s,o.style.display="none",document.querySelector("#project-title").placeholder=s,e.classList.add("active"),c.classList.add("active"),console.log(`Opened edit form for project ${s}!`),i.initFormProjectButtons()}static initFormProjectButtons(){const t=document.querySelector("#button-cancel-project-edit");document.querySelector("#button-rename-project").addEventListener("click",i.submitForm),t.addEventListener("click",i.cancelForm)}static submitForm(t){t.preventDefault();const e=document.querySelector("#overlay"),c=document.querySelector("#form-project-container"),o=document.querySelector("#current-project-title").textContent,n=document.querySelector("#project-title").value,r=document.querySelectorAll(".card-project");return""===n?(document.querySelector("#project-title").value="",void console.log("New project name cannot be empty!")):s.getProjectsList().contains(n)?(document.querySelector("#project-title").value="",void console.log("The new project name cannot be identical to an existing project!")):(r.forEach((t=>{if(t.getAttribute("id")!==o)return;const e=t.children[0].children[0];t.setAttribute("id",n),e.textContent=n})),s.renameProject(o,n),e.classList.remove("active"),void c.classList.remove("active"))}static cancelForm(){const t=document.querySelector("#current-project-title").textContent,e=document.querySelector("#overlay"),c=document.querySelector("#form-project-container");e.classList.remove("active"),c.classList.remove("active"),console.log(`Project ${t} form cancelled!`)}}class d{static project(){i.createProject()}static initProjectButtons(){i.initProjectButtons()}static openProject(t,e){i.openProject(t,e)}static projectForm(){i.forProjectFormButtons()}static openInboxProject(){i.openInboxProject()}static form(){a.formEvents()}}class l{static loadPage(){d.form(),d.project(),d.openProject("Inbox",document.querySelector("#button-inbox-projects")),l.loadProjects(),d.openInboxProject()}static loadProjects(){s.getProjectsList().getProjects().forEach((t=>{"Inbox"!==t.name&&l.loadProject(t.name)}))}static loadProject(t){e.aProjectCard(t),d.initProjectButtons(),console.log(`Project ${t} is loaded!`)}}document.addEventListener("DOMContentLoaded",l.loadPage)})();